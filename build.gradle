apply plugin: goPlugin

goPlug.goPath = '/Users/daneuriona/goWorkspace'
goPlug.versionFile = '/Users/daneuriona/goWorkspace/version.txt'
goPlug.versionMap = [:]

class goPlugin implements Plugin<Project> {
    void apply(Project project) {
        
        // DEFAULTS
        project.extensions.create("goPlug",goPlugPluginExtension)
        project.defaultTasks 'goPlugin_Welcome','createVersionMap'

        // INFORMATIONAL TASKS

        project.task('goPlugin_Welcome') {
            doFirst{
                println "Welcome to the goPlugin, you're settings are as follows:"
                println "  Root Project: $project.rootProject"
                println "  At: $project.rootDir"
                println "  GoPath: $project.goPlug.goPath"
                println "  Version File: $project.goPlug.versionFile"
            }  
        }

        project.task('printProjectTree') << {
            def File goWorkspace
            goWorkspace = project.file(("$project.goPlug.goPath"+"/src"))
            println "  Go Projects in this workspace:"
            goWorkspace.eachDir {a_project ->
                println "    $a_project"
            }
        }

        project.task('printImportList') << {
            println project.goPlug.importList
        }

        // INITIALIZATION TASKS

        project.task('findImports') << {
            FileTree goWorkspace
            goWorkspace = project.fileTree(dir: project.goPlug.goPath)
            // We only care about go files
            goWorkspace.include '**/*.go'
            //println "Here are some imports"
            def list = []
            goWorkspace.visit {gofile ->
                if ("$gofile.relativePath".endsWith('.go')){ 
                    // Have to translate between gradle object and groovy File object, so remove the 'file ' at start of string
                    def t = new File("$gofile".replace('file ','').replace("'",'')).text
                    def simple_depends = t.findAll(~/import\s+\".+\"/)
                    simple_depends.each{list.add(it.find('\".+\"').replace('"',''))}
                    def compound_depends = String.valueOf(t.replace('\n','').find(~/import\s\(.+?\)/))
                    compound_depends.findAll(~/\".+?\"/).each{list.add(it.replace('"',''))}
                    
                }
            }
            project.goPlug.importList = list as Set
        }

        project.task('createVersionMap') << {
            def File vf
            vf = project.file(project.goPlug.versionFile)
            if (vf.isFile()){
                vf.eachLine{ sourceVersion ->
                    project.goPlug.versionMap[sourceVersion.tokenize("\t")[0]] = sourceVersion.tokenize("\t")[1]
                }
            }
            println "The projects you wish versioned, with the git commits you want:"
            println project.goPlug.versionMap
        }

        // ACTION TASKS

        project.task('executeCheckouts') << {
            project.goPlug.versionMap.each{ projectToUpdate ->
                def folder = "$project.goPlug.goPath"+"/src/"+"$projectToUpdate.key"
                def gitVersion = "$projectToUpdate.value"
                def newTask = "checkout_"+"$projectToUpdate.value"
                println "Checking out commit: $gitVersion, on project: $folder"
                // Have to use ant for immediate execution
                // Gradle exec only works for defining tasks, but not kicking them off
                ant.exec(dir:"$folder",executable:"git"){arg line: "checkout $gitVersion"}
            }
        }

        project.task('clean') 
        project.task('build') << {
            def File goWorkspace
            goWorkspace = project.file(("$project.goPlug.goPath"+"/src"))
            goWorkspace.eachDir {t ->
                def foundGoFile = false
                if (t.isDirectory()){
                    t.eachFileMatch(~/.+\.go$/){
                        foundGoFile = true
                    }
                    if (foundGoFile){
                        //println "  Installing "+"$t.absolutePath"-"$project.goPlug.goPath"-"/src/"
                        project.tasks["goBuild_"+"$t.absolutePath"-"$project.goPlug.goPath"-"/src/"].execute()
                    }
                }
            }
        }

        project.task('install') << {
            def File goWorkspace
            goWorkspace = project.file(("$project.goPlug.goPath"+"/src"))
            goWorkspace.eachDir {t ->
                def foundGoFile = false
                if (t.isDirectory()){
                    t.eachFileMatch(~/.+\.go$/){
                        foundGoFile = true
                    }
                    if (foundGoFile){
                        //println "  Installing "+"$t.absolutePath"-"$project.goPlug.goPath"-"/src/"
                        project.tasks["goInstall_"+"$t.absolutePath"-"$project.goPlug.goPath"-"/src/"].execute()
                    }
                }
            }
        }
        
        project.task('test') << {
            FileTree goWorkspace
            goWorkspace = project.fileTree(dir: ("$project.goPlug.goPath" + "/src"))
            goWorkspace.include '**/*_test.go'
            goWorkspace.visit {test_file ->
                def t = new File("$test_file".replace('file ','').replace("'",''))
                def foundATestFile = false
                if (t.isDirectory()){
                    t.eachFileMatch(~/.+test\.go$/){
                        foundATestFile = true
                    }
                    if (foundATestFile){
                        project.tasks["goTest_"+"$t.absolutePath"-"$project.goPlug.goPath"-"/src/"].execute()
                    }
                }
            }
        }

        // RULES FOR SPECIAL CASE EXECUTION

        project.tasks.addRule("Pattern: goGet_<ID>"){ String taskName ->
            if (taskName.startsWith("goGet_")){
                project.task(taskName,type:Exec){
                    println "  Getting $taskName"-"goGet_"+" in workspace $project.goPlug.goPath"
                    workingDir project.goPlug.goPath
                    executable 'go'
                    args 'get', (taskName - 'goGet_')
                }
            }
        }

        project.tasks.addRule("Pattern: goInstall_<ID>"){ String taskName ->
            if (taskName.startsWith("goInstall_")){
                project.task(taskName,type:Exec){
                    println "  Installing $taskName"-"goInstall_"+" in workspace $project.goPlug.goPath"
                    workingDir project.goPlug.goPath
                    executable 'go'
                    args 'install', (taskName - 'goInstall_')
                }
            }
        }

        project.tasks.addRule("Pattern: goBuild_<ID>"){ String taskName ->
            if (taskName.startsWith("goBuild_")){
                project.task(taskName,type:Exec){
                    println "  Building $taskName"-"goBuild_"+" in workspace $project.goPlug.goPath"
                    workingDir project.goPlug.goPath
                    executable 'go'
                    args 'build', (taskName - 'goBuild_')
                }
            }
        }

        project.tasks.addRule("Pattern: goRun_<ID>"){ String taskName ->
            if (taskName.startsWith("goRun_")){
                project.task(taskName,type:Exec){
                    println "  Running $taskName"-"goRun_"+" in workspace $project.goPlug.goPath"
                    workingDir project.goPlug.goPath
                    executable 'go'
                    args 'run', (taskName - 'goRun_')
                }
            }
        }

        project.tasks.addRule("Pattern: goTest_<ID>"){ String taskName ->
            if (taskName.startsWith("goTest_")){
                project.task(taskName,type:Exec){
                    println "  Testing $taskName"-"goTest_"+" in workspace $project.goPlug.goPath"
                    workingDir project.goPlug.goPath
                    executable 'go'
                    args 'test', (taskName - 'goTest_')
                }
            }
        }

        // TASK DEPENDENCIES

        
        project.createVersionMap.dependsOn project.goPlugin_Welcome
        project.executeCheckouts.dependsOn project.createVersionMap
        project.printImportList.dependsOn project.findImports
    }
}

class goPlugPluginExtension {
    def String goPath = './'
    def String versionFile = ''
    def Map versionMap = [:]
    def LinkedHashSet importList = [] as Set
}